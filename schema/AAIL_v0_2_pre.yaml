AAIL:
  version: "0.2-pre"
  description: >
    Declarative, markup-safe instruction language for AI meta-reasoning and transparency.
    Hybrid design inspired by BASIC, SQL, and ColdFusion.
  verbs:
    - REMEMBER
    - RECALL
    - CACHE
    - FORGET
    - VERIFY
    - EVALUATE
    - REPORT
    - MATCH
    - LIKE
    - IMPLIES
    - FILTER
    - SELECT
    - COUNT
    - SUM
    - EXISTS
    - CONSIDER
  comparison_operators:
    - EQ
    - NEQ
    - GT
    - LT
    - GTE
    - LTE
  control_flow:
    - IF
    - THEN
    - ELSE
    - CASE
  state_scopes:
    - GLOBAL
    - LOCAL
    - TEMPORARY
  transparency_tags:
    - REPORT
    - TRACE
  evaluation_states:
    - VALID: Value or condition can be logically evaluated
    - INVALID: Includes NULL, UNDEFINED, or undetermined states
  consider_result_syntax:
    - CONSIDER DIRECTIVE <directiveName>
    - CONSIDER DIRECTIVE <directiveName> RES REM <variableName>
    - Note: RES REM stores the result of the directive evaluation into a state variable.
  result_terms:
    - RESULT: Full term indicating the outcome of an evaluation.
    - RES: Shorthand for RESULT.
  state_assignment_terms:
    - REMEMBER: Full verb for assigning a value to state.
    - REM: Shorthand for REMEMBER.
  design_principles:
    - Declarative-first
    - Semantic transparency
    - Markup compatibility
    - Cross-model interpretability

## Eval Block Format Declaration Rule

- Simple eval blocks containing only AAIL logic can omit type declaration.
- For eval blocks containing multiple formats (YAML, Markdown, XML, etc.), the format types must be declared in the :start eval line.
- Syntax example:
    :start eval YAML, Markdown, AAIL

- Body must then segregate content using clear section headers:
    yaml:
      ...
    Markdown:
      ...
    xml:
      ...
    AAIL:
      ...
